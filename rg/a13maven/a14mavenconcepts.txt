
 1. What is Maven?

Maven is a build automation and dependency management tool for Java projects. It simplifies compiling, packaging, testing, and managing libraries.

---

 2. Project Structure (Standard Layout)

Maven follows a convention-over-configuration principle with a default directory structure:


project/
├── pom.xml               Project Object Model file (core config)
├── src/
│   ├── main/java/        Source code
│   └── test/java/        Test code


---

  3. `pom.xml` — Project Object Model

This XML file is the heart of a Maven project. It contains:

 Project metadata (name, version, description)
 Dependencies (external libraries)
 Build configuration (plugins, goals)
 Repositories
 Project relationships (parent/child)

 Example snippet:

xml
<project>
  <modelVersion>4.0.0</modelVersion>
  <groupId>com.example</groupId>
  <artifactId>myproject</artifactId>
  <version>1.0-SNAPSHOT</version>
</project>


---

  4. Dependencies

Maven manages external libraries (JARs) using a `<dependencies>` section.
 Maven will download them from Maven Central automatically.

 Example:

xml
<dependency>
  <groupId>junit</groupId>
  <artifactId>junit</artifactId>
  <version>4.13.2</version>
  <scope>test</scope>
</dependency>


---

 🛠️ 5. Lifecycle Phases

Maven has a build lifecycle with defined phases:

| Phase      | Description                               |
| ---------- | ----------------------------------------- |
| `validate` | Validate project structure                |
| `compile`  | Compile source code                       |
| `test`     | Run unit tests                            |
| `package`  | Package compiled code into JAR/WAR        |
| `verify`   | Run checks (integration tests, etc.)      |
| `install`  | Install package to local Maven repo       |
| `deploy`   | Upload to remote repository (for sharing) |

 Example:

bash
mvn compile        Compiles the project
mvn package        Builds the JAR/WAR
mvn test           Runs unit tests


---

  6. Plugins

Plugins add custom goals/tasks like generating documentation, creating jars, running web servers, etc.

 Example:

xml
<plugin>
  <groupId>org.apache.maven.plugins</groupId>
  <artifactId>maven-jar-plugin</artifactId>
</plugin>


---

 🌐 7. Repositories

Maven downloads dependencies from remote repositories, by default [Maven Central](https://search.maven.org/).

You can also use:

 Local repository: `~/.m2/repository`
 Remote repositories (Nexus, Artifactory, etc.)

---

 🔁 8. Archetypes

Archetypes are project templates. Use them to quickly generate project skeletons.

bash
mvn archetype:generate


---

 📋 9. Coordinates

Each project/library is uniquely identified using Maven coordinates:

text
<groupId>:<artifactId>:<version>


Example:


junit:junit:4.13.2


---

 10. Benefits of Maven

 Automatic dependency management
 Standardized project structure
 Easy builds and deployments
 Large plugin ecosystem
 Integration with IDEs and CI tools

---

